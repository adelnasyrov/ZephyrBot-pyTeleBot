import os

from telegram import ReplyKeyboardMarkup
from telegram import Update
from telegram.ext import ConversationHandler
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# Define states for conversation
NAME, AGE, GENDER, LOOKING_FOR, SCHOOL, PROGRAM, PHOTO, SEARCH, WAITING_FOR_ANSWER = range(9)

user_portfolios = {}
PHOTOS_FOLDER = 'photos'


# Start command
def start(update: Update, context: CallbackContext) -> int:
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç, –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É. "
        "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
    )
    return NAME


# Function to handle user's name
def get_name(update: Update, context: CallbackContext) -> int:
    name = update.message.text
    user_portfolios[update.message.chat_id] = {"name": name, "likes_received": {}, "likes_sent": {}}
    context.user_data["name"] = name
    update.message.reply_text(
        f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {user_portfolios[update.message.chat_id]['name']}! –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?"
    )
    return AGE


# Function to handle user's age
def get_age(update: Update, context: CallbackContext) -> int:
    try:
        age = int(update.message.text)
    except ValueError:
        return AGE
    user_portfolios[update.message.chat_id]["age"] = age
    context.user_data["age"] = age
    keyboard = [['–ü–∞—Ä–µ–Ω—å üë®', '–î–µ–≤—É—à–∫–∞ üë©']]
    update.message.reply_text(
        "–ö–∞–∫–æ–≥–æ —Ç—ã –ø–æ–ª–∞?",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True),
    )
    return GENDER


# Function to handle user's gender
def get_gender(update: Update, context: CallbackContext) -> int:
    gender = update.message.text
    user_portfolios[update.message.chat_id]["gender"] = gender
    context.user_data["gender"] = gender
    keyboard = [['–ü–∞—Ä–µ–Ω—å üë®', '–î–µ–≤—É—à–∫–∞ üë©'], ['–ù–µ–≤–∞–∂–Ω–æ']]
    update.message.reply_text(
        "–° –∫–µ–º —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è?",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True),
    )
    return LOOKING_FOR


# Function to handle who the user is looking for
def get_looking_for(update: Update, context: CallbackContext) -> int:
    looking_for = update.message.text
    user_portfolios[update.message.chat_id]["looking_for"] = looking_for
    context.user_data["looking_for"] = looking_for
    keyboard = [['–ò–ü–ê–ú', '–í–®–ö–ú–∏–°'], ['–í–®–§', '–í–®–°–ì–ù'], ['–í–ò–® –ù–ú–ò–¢', '–í–®–≠–ò–ë'], ['–í–®–ú', '–í–®–ö–ò'], ['–í–®–ü', '–ü—Ä–µ–ø–æ–¥–æ–≤–∞—Ç–µ–ª—å']]
    update.message.reply_text(
        "–° –∫–∞–∫–æ–π —Ç—ã –≤—ã—Å—à–µ–π —à–∫–æ–ª—ã?",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True),
    )
    return SCHOOL


def get_school(update: Update, context: CallbackContext) -> int:
    school = update.message.text
    user_portfolios[update.message.chat_id]["school"] = school
    context.user_data["school"] = school
    if user_portfolios[update.message.chat_id]["school"] != "–ü—Ä–µ–ø–æ–¥–æ–≤–∞—Ç–µ–ª—å":
        update.message.reply_text(
            "–ù–∞ –∫–∞–∫–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç—ã —É—á–∏—à—å—Å—è?",
        )
        return PROGRAM
    user_portfolios[update.message.chat_id]["program"] = ""
    context.user_data["program"] = ""
    update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –Ω–æ –∏–º–µ–π –≤–≤–∏–¥—É, –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –µ–µ –≤–∏–¥–µ—Ç—å!"
    )
    return PHOTO


def get_program(update: Update, context: CallbackContext) -> int:
    program = update.message.text
    user_portfolios[update.message.chat_id]["program"] = program
    context.user_data["program"] = program
    update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –Ω–æ –∏–º–µ–π –≤–≤–∏–¥—É, –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –µ–µ –≤–∏–¥–µ—Ç—å!"
    )
    return PHOTO


# Function to handle user's photo
def get_photo(update: Update, context: CallbackContext) -> int:
    # Get the file ID of the photo
    file_id = update.message.photo[-1].file_id
    file = context.bot.get_file(file_id)

    # Create the photos folder if it doesn't exist
    os.makedirs(PHOTOS_FOLDER, exist_ok=True)

    # Save the photo with a unique name
    photo_path = os.path.join(PHOTOS_FOLDER, f'{file_id}.jpg')
    file.download(photo_path)

    # Store the file path in user_data
    user_portfolios[update.message.chat_id]["photo"] = photo_path
    context.user_data["photo"] = photo_path
    update.message.reply_text(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! \n–í–≤–µ–¥–∏ /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤."
    )

    return SEARCH


# Function to cancel the conversation
def cancel(update: Update) -> int:
    update.message.reply_text(
        "–î–∏–∞–ª–æ–≥ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω. \n–í–≤–µ–¥–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
    )
    return ConversationHandler.END


def search(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    bot = context.bot
    if user_id not in user_portfolios:
        update.message.reply_text(
            "–ó–∞–≤—Ä–µ—à–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start –ø—Ä–µ–∂–¥–µ —á–µ–º –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!"
        )
        return ConversationHandler.END

    answer = update.message.text
    other_user_id = context.user_data.get('other_user_id')
    if other_user_id is not None:
        my_user_username = context.bot.get_chat_member(chat_id=update.message.chat_id,
                                                       user_id=update.message.chat_id)["user"]["username"]
        other_user_username = context.bot.get_chat_member(chat_id=other_user_id,
                                                          user_id=other_user_id)["user"]["username"]

        if other_user_id in user_portfolios[user_id]['likes_received']:
            if answer == "‚ù§Ô∏è":
                bot.send_message(user_id,
                                 f"–í—ã —Å @{other_user_username} –ª–∞–π–∫–Ω—É–ª–∏ –ø—Ä–æ—Ñ–∏–ª–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∑–Ω–∞–∫–æ—Å—Ç–≤–∞!")
                del user_portfolios[user_id]['likes_received'][other_user_id]
                user_portfolios[other_user_id]['likes_received'][user_id] = my_user_username
            elif answer == "üëé":
                del user_portfolios[user_id]['likes_received'][other_user_id]
                del user_portfolios[other_user_id]['likes_sent'][user_id]

        else:
            if answer == "‚ù§Ô∏è":
                user_portfolios[user_id]["likes_sent"][other_user_id] = other_user_username
                print(my_user_username, user_portfolios[user_id]["likes_sent"])

                user_portfolios[other_user_id]["likes_received"][user_id] = my_user_username

    search_results = context.user_data.get("search_results")

    if search_results is None:
        search_results = []

    viewed_profiles = context.user_data.get("viewed_profiles")

    if viewed_profiles is None:
        viewed_profiles = []

    likes_sent_and_received = []
    likes_received = []

    for other_user_id, user_data_ in user_portfolios.items():

        if other_user_id in user_portfolios[user_id]['likes_received'] and other_user_id in \
                user_portfolios[user_id]['likes_sent']:
            if other_user_id in search_results:
                search_results.remove(other_user_id)
            likes_sent_and_received.append(other_user_id)

        elif other_user_id in user_portfolios[user_id]['likes_received']:
            if other_user_id in search_results:
                search_results.remove(other_user_id)
            likes_received.append(other_user_id)

        elif other_user_id != user_id and other_user_id not in search_results and other_user_id not in viewed_profiles:
            search_results.append(other_user_id)

    context.user_data['search_results'] = likes_sent_and_received + likes_received + search_results
    context.user_data['viewed_profiles'] = viewed_profiles

    send_profiles(update, context)


def send_profiles(update: Update, context: CallbackContext) -> int:
    search_results = context.user_data.get('search_results', [])

    chat_id = update.message.chat_id
    bot = context.bot

    if not search_results:
        bot.send_message(chat_id, "–ü–æ–∫–∞ —á—Ç–æ –≤—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è –∏ –º—ã –Ω–∞–π–¥–µ–º —Ç–µ–±–µ "
                                  "–∫–æ–≥–æ-—Ç–æ –µ—â–µ! –ê –≤–æ–∑–º–æ–∂–Ω–æ —Ç–µ–±—è –∫—Ç–æ-—Ç–æ –ª–∞–π–∫–Ω—É–ª, –∏—Å–ø–æ–ª—å–∑—É–π /search —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è!")

        return ConversationHandler.END

    other_user_id = search_results[0]
    user_data_ = user_portfolios[other_user_id]
    user_name = user_data_["name"]
    user_age = user_data_["age"]
    user_school = user_data_["school"]
    user_program = user_data_["program"]
    user_photo = user_data_["photo"]
    context.user_data['other_user_id'] = other_user_id

    if other_user_id in user_portfolios[chat_id]["likes_received"] and other_user_id in user_portfolios[chat_id][
        "likes_sent"]:
        print("hueta")
        message_text = f"{user_name}, {user_age}\n{user_school}: {user_program}\n\n@{user_portfolios[chat_id]['likes_sent'][other_user_id]} –ª–∞–π–∫–Ω—É–ª –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ –æ—Ç–≤–µ—Ç!"
        bot.send_photo(chat_id=chat_id, photo=open(user_photo, 'rb'), caption=message_text)

        del user_portfolios[chat_id]["likes_received"][other_user_id]
        del user_portfolios[chat_id]["likes_sent"][other_user_id]

        return search(update, context)

    message_text = f"{user_name}, {user_age}\n{user_school}: {user_program}"

    if other_user_id in user_portfolios[chat_id]["likes_received"]:
        message_text = f"–≠—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞. –õ–∞–π–∫–Ω–∏ –≤ –æ—Ç–≤–µ—Ç —á—Ç–æ–±—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!\n\n{user_name}, {user_age}\n{user_school}: {user_program}"

    reply_markup = ReplyKeyboardMarkup([['‚ù§Ô∏è', 'üëé']], one_time_keyboard=True)
    bot.send_photo(chat_id=chat_id, photo=open(user_photo, 'rb'), caption=message_text,
                   reply_markup=reply_markup)

    return handle_waiting_for_answer(update, context)


def handle_waiting_for_answer(update: Update, context: CallbackContext) -> int:
    other_user_id = context.user_data.get('other_user_id')

    search_results = context.user_data.get('search_results', [])
    search_results.remove(other_user_id)

    context.user_data["search_results"] = search_results

    viewed_profiles = context.user_data.get('viewed_profiles', [])
    viewed_profiles.append(other_user_id)
    context.user_data['viewed_profiles'] = viewed_profiles

    return SEARCH


# Set up the ConversationHandler
conv_handler = ConversationHandler(
    entry_points=[CommandHandler('start', start)],
    states={
        NAME: [MessageHandler(Filters.text & ~Filters.command, get_name)],
        AGE: [MessageHandler(Filters.regex('^\d+$'), get_age)],
        GENDER: [MessageHandler(Filters.regex('^(–ü–∞—Ä–µ–Ω—å üë®|–î–µ–≤—É—à–∫–∞ üë©)$'), get_gender)],
        LOOKING_FOR: [MessageHandler(Filters.regex('^(–ü–∞—Ä–µ–Ω—å üë®|–î–µ–≤—É—à–∫–∞ üë©|–ù–µ–≤–∞–∂–Ω–æ)$'), get_looking_for)],
        SCHOOL: [MessageHandler(Filters.regex('^(–ò–ü–ê–ú|–í–®–ö–ú–∏–°|–í–®–§|–í–®–°–ì–ù|–í–ò–® –ù–ú–ò–¢|–í–®–≠–ò–ë|–í–®–ú|–í–®–ö–ò|–í–®–ü|–ü—Ä–µ–ø–æ–¥–æ–≤–∞—Ç–µ–ª—å|)$'),
                                get_school)],
        PROGRAM: [MessageHandler(Filters.text & ~Filters.command, get_program)],
        PHOTO: [MessageHandler(Filters.photo, get_photo)],
        SEARCH: [MessageHandler(Filters.text & ~Filters.command, search)],
        WAITING_FOR_ANSWER: [MessageHandler(Filters.text & ~Filters.command, handle_waiting_for_answer)],
    },
    fallbacks=[CommandHandler('cancel', cancel)],
)

# Run the bot
if __name__ == '__main__':
    updater = Updater('6373983672:AAFJPyO1sR_nAm0ae3A4qeR-vhWExuRk7i8', use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("search", search))
    dp.add_handler(conv_handler)
    updater.start_polling()
    updater.idle()
